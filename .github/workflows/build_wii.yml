name: Fuse Libspectrum WII Build
run-name: Build Libspectrum for WII / ${{ github.actor }} /
on: [push]
jobs:
  build:
    name: Build Fuse Libspectrum for WII
    runs-on: ubuntu-latest
    steps:
      - name: (1) Check out repository code
        uses: actions/checkout@v3

      - name: (2) Install dependencies
        run: |
          echo "Installing dependencies (pacman, devkitPro stuff) .."
          
          ## https://devkitpro.org/wiki/devkitPro_pacman
          sudo apt-get install -y pacman
          
          DEVKITPRO=/opt/devkitpro
          DEVKITARM=/opt/devkitpro/devkitARM
          DEVKITPPC=/opt/devkitpro/devkitPPC
          
          sudo pacman-key --recv BC26F752D25B92CE272E0F44F7FD5492264BB9D0 --keyserver keyserver.ubuntu.com
          sudo pacman-key --lsign BC26F752D25B92CE272E0F44F7FD5492264BB9D0
          
          wget https://pkg.devkitpro.org/devkitpro-keyring.pkg.tar.xz
          
          cat "\n[dkp-libs]\nServer = https://pkg.devkitpro.org/packages\n" | tee -a /etc/pacman.conf
          cat "\n[dkp-linux]\nServer = https://pkg.devkitpro.org/packages/linux/$arch/\n" | tee -a /etc/pacman.conf
          
          sudo pacman -Syu
          
          sudo pacman -S wii-dev
          
        shell: bash

      - name: (3) Autogen.sh
        run: |
          echo "Running autogen.sh .."
          ./autogen.sh
        shell: bash

      - name: (4) Configure for WII (fake glib)
        run: |
          echo "Running configure for WII .."
          ./configure --target=powerpc-gekko --host=powerpc-gekko \
            --prefix=$DEVKITPPC \
            --without-libgcrypt --with-fake-glib --without-libaudiofile \
            | tee ./configure.out
        shell: bash

      - name: (5) Verify output from configure
        run: |
          message1="Internal GLib replacement: yes"
          echo "Looking for line '$message1' .."
          lines1=(`cat "./configure.out" | grep -c "$message1"`)
          if [[ "$lines1" -ne "1" ]]; then
            echo "Error: Line $message1 not found!"
            exit 1
          fi
          echo "Line '$message1' was found."
        shell: bash

      - name: (6) Make
        run: |
          echo "Running make .."
          make
        shell: bash

      - name: (7) Install (+sudo)
        run: |
          echo "Running make install .."
          sudo make install
        shell: bash

      - name: (8) Run tests
        run: |
          echo "Bulding and running tests .."
          make check
        shell: bash

      - name: (9) Finish
        run: |
          echo "üçè Finishing with status ${{ job.status }}."
